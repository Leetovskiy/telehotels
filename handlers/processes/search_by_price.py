from typing import Dict, Union, Optional, List

import requests
from loguru import logger
from telebot.types import Message, InputMediaPhoto

import utils
from loader import bot
from loader import requester

REQ_PARAMS_TYPE = Dict[str, Union[str, int]]
BUILT_MESSAGES_TYPE = List[Dict[str, Union[str, List[InputMediaPhoto]]]]


def ask_city_step(msg: Message, params: REQ_PARAMS_TYPE) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param msg: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞
    """
    chat_id = msg.chat.id
    reply = msg.text

    user = msg.from_user
    logger.info(f'–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ ({user.username} ‚Äì {user.id}), –æ—Ç–≤–µ—Ç: {reply}')

    if utils.locale_from_string(reply) is None:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è.\n' \
               '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_city_step, params)
        return

    try:
        destination_id = requester.search_destination(reply)
    except (requests.ConnectionError, requests.Timeout) as e:
        text = '–û—à–∏–±–∫–∞: –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞.\n' \
               '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_city_step)
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ destinationId: {e}')
        return

    if destination_id is None:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n' \
               '–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_city_step)
        return
    params['destination_id'] = destination_id

    text = '–Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –¥–æ 5-—Ç–∏ –æ—Ç–µ–ª–µ–π. –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å?'
    sent_message = bot.send_message(chat_id, text)
    bot.register_next_step_handler(sent_message, ask_count_step, params)


def ask_count_step(msg: Message, params: REQ_PARAMS_TYPE) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞

    :param msg: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞
    """

    chat_id = msg.chat.id
    reply = msg.text

    user = msg.from_user
    logger.info(f'–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π ({user.username} ‚Äì {user.id}), –æ—Ç–≤–µ—Ç: {reply}')

    try:
        params['results_count'] = int(reply)
    except ValueError:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ.'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_count_step, params)
        return
    if not 0 < params['results_count'] <= 5:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_count_step, params)
        return

    text = '–ò–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å 10 —à—Ç—É–∫. –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å?\n' \
           '–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å <code>0</code>'
    sent_message = bot.send_message(chat_id, text)
    bot.register_next_step_handler(sent_message, ask_photos_step, params)


def ask_photos_step(msg: Message, params: REQ_PARAMS_TYPE) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ

    :param msg: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """

    chat_id = msg.chat.id
    reply = msg.text

    user = msg.from_user
    logger.info(f'–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ ({user.username} ‚Äì {user.id}), –æ—Ç–≤–µ—Ç: {reply}')

    try:
        params['photos_count'] = int(reply)
    except ValueError:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ.'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_photos_step, params)
        return
    if not 0 <= params['photos_count'] <= 10:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.'
        error_message = bot.send_message(chat_id, text)
        bot.register_next_step_handler(error_message, ask_count_step, params)
        return

    show_hotels(params, chat_id)


def show_hotels(req_params: REQ_PARAMS_TYPE, chat_id: int) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param req_params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    :param chat_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    """

    status_message = bot.send_message(chat_id, '–ü–æ–∏—Å–∫‚Ä¶')
    try:
        logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–µ–ª—è')
        search_results = requester.request_by_price(sort_order=req_params['sort_order'],
                                                    destination_id=req_params['destination_id'],
                                                    count=req_params['results_count'])
    except (requests.ConnectionError, requests.Timeout) as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–µ–ª–µ–π: {e}')
        bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å Hotels.com\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        return
    else:
        bot.delete_message(chat_id, status_message.id)
        logger.info('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω')
    messages = build_messages(search_results, req_params['photos_count'])

    for message in messages:
        try:
            status_message = bot.send_message(chat_id, '–û–∂–∏–¥–∞–π—Ç–µ‚Ä¶')
            if message['photos'] is not None:
                bot.send_media_group(chat_id=chat_id, media=message['photos'])
            bot.send_message(chat_id=chat_id, text=message['text'], disable_web_page_preview=True)
            bot.delete_message(chat_id, status_message.id)
        except requests.RequestException as e:
            bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶')
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (chat: {chat_id})')
        else:
            logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (chat: {chat_id})')


def build_messages(response: dict,
                   photos_count: Optional[int]) -> BUILT_MESSAGES_TYPE:
    """
    –°–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (–µ—Å–ª–∏
    —Ç—Ä–µ–±—É–µ—Ç—Å—è), —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –Ω–∏—Ö —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏
    —Å–ø–∏—Å–∫–æ–º InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.

    :param response: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    :param photos_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º—ã—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é,
        –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    :return: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∏—Å–æ–∫
        InputMediaPhoto, –µ—Å–ª–∏ —Ñ–æ—Ç–æ —Ç—Ä–µ–±—É—é—Ç—Å—è
    """

    messages = []
    for elem in response:
        name = elem['name']
        address = ', '.join((elem['address']['streetAddress'],
                             elem['address']['locality'],
                             elem['address']['countryName']))
        price = elem['ratePlan']['price']['current']
        for landmark in elem['landmarks']:
            if landmark['label'] in ('–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞', 'City center'):
                center_remoteness = landmark['distance']
                break
        else:
            center_remoteness = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        link = f'https://ru.hotels.com/ho{elem["id"]}'

        message_text = '\n'.join((
            f'<b>{name}</b>',
            f'üè¢ <b>–ê–¥—Ä–µ—Å:</b> {address}',
            f'üéØ <b>–û—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞:</b> {center_remoteness}',
            f'üí≤ <b>–¶–µ–Ω–∞:</b> {price}/—Å—É—Ç–∫–∏',
            f'üîó <a href="{link}">–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ</a>'
        ))

        photos = None
        if photos_count:
            try:
                logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
                photo_results = requester.request_photos(elem['id'])
            except (requests.ConnectionError, requests.Timeout) as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}')
                continue
            else:
                logger.info('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω')

            if len(photo_results) > photos_count:
                photo_results = photo_results[:photos_count]

            photos = [InputMediaPhoto(media=link, caption=name)
                      for link in photo_results]

        messages.append({'text': message_text, 'photos': photos})
    return messages
